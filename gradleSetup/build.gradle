//Android Gradle build Script:Start
import org.apache.tools.ant.taskdefs.condition.Os
import java.util.regex.Pattern


buildscript {
    repositories {
		//Gradle External Repositories
		google() 
        jcenter()
    }
    dependencies {
		//Gradle Build External Dependencies
        classpath 'com.android.tools.build:gradle:3.0.1'
		classpath 'com.google.gms:google-services:3.1.0'   
    }
}
apply plugin: 'com.google.gms.google-services'
//Android Gradle build Script:End
repositories {
   maven {
     url "https://software.insert.io/artifactory/android-sdk-externals"
   }
   maven {
     url "https://software.insert.io/artifactory/android-release"
   }
  mavenCentral()
 }

apply plugin: 'com.android.application'
apply plugin: 'android'

def doExtractStringFromManifest(name) {
     def manifestFile = file(android.sourceSets.main.manifest.srcFile)
     def pattern = Pattern.compile(name + "=\"(\\S+)\"")
     def matcher = pattern.matcher(manifestFile.getText())
     matcher.find()
     return matcher.group(1)
}

configurations {
        all*.exclude group: 'com.android.support', module: 'support-v7'
}
	

dependencies {
	//Android Project Dependencies :Start
	//implementation 'com.google.android.gms:play-services-maps:11.6.0'
	//implementation 'com.google.android.gms:play-services:11.0.1'
	implementation 'com.google.android.gms:play-services:11.6.0'
	implementation 'com.google.firebase:firebase-messaging:11.6.0'
	implementation 'com.android.support:multidex:1.0.1'
	implementation 'com.android.support:appcompat-v7:27.1.1'
	implementation 'com.android.support:recyclerview-v7:27.1.1'
	//added below entries for EKYC passport scanning
    //commentted below entry for new NEC passport SDK verion 1.7
	//implementation 'com.rmtheis:tess-two:5.4.1'
	implementation 'com.rmtheis:tess-two:9.0.0'
	implementation 'net.sf.scuba:scuba-sc-android:0.0.9'
	implementation 'com.github.mhshams:jnbis:1.1.0'
	//commentted below entry for new NEC passport SDK verion 1.7
	//implementation 'edu.ucar:jj2000:5.2'
	implementation 'io.card:android-sdk:5.5.0'
	implementation 'com.madgag.spongycastle:prov:1.54.0.0'
	implementation 'org.bouncycastle:bcprov-jdk15on:1.52'
	//added below entry for new NEC passport SDK verion 1.7
	implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.+'
	//end of passport scanning entries
	
	implementation 'com.google.code.gson:gson:2.2.4+'
	implementation 'me.dm7.barcodescanner:zxing:1.9.8'
	implementation 'com.google.zxing:core:3.2.0'
	implementation group:'sdk.insert.io' , name:'insertIO', version:'1.51.51.+', changing:true
    implementation fileTree(dir: 'libs', include:[ '*.jar'])	
	
	//added below entries for EKYC citizen Id scan
	//implementation 'com.android.support.constraint:constraint-layout:1.1.2'
	
	//epid related entries for V1.6
	implementation 'com.android.support:support-compat:27.1.1'
	implementation 'com.android.support:design:27.1.1'
	//implementation 'com.google.android.gms:play-services-vision:16.2.0'
	implementation 'org.jcodec:jcodec:0.2.2'
	implementation 'org.jcodec:jcodec-android:0.2.2'
	
	//Mutual Funds
	implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'
	implementation 'com.github.barteksc:pdfium-android:1.9.0'
	
	//Android Project Dependencies :End
}

fileTree(dir: 'libs', include: '**/*.aar')
        .each { File file ->
    dependencies.add("implementation", [name: file.name.lastIndexOf('.').with { it != -1 ? file.name[0..<it] : file.name }, ext: 'aar'])
}

android {
	//Android build options:Start
	compileSdkVersion  'android-27'
    buildToolsVersion '27.0.3'
	packagingOptions {
		//Project packaging options:Start
		exclude 'META-INF/DEPENDENCIES'
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/license.txt'
		exclude 'META-INF/NOTICE'
		exclude 'META-INF/NOTICE.txt'
		exclude 'META-INF/notice.txt'
		exclude 'META-INF/ASL2.0'
		exclude 'MANIFEST.MF'
		//Project packaging options:End
		
	}	
    defaultConfig {
		//Project Default Config:Start
		 minSdkVersion 19
         targetSdkVersion 26
        multiDexEnabled true
        sourceSets.main {
			//Project folder mapping:Start
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jni.srcDirs = [] //disable automatic ndk-build call
            jniLibs.srcDir 'libs' //set .so files location to libs
			//Project folder mapping:End
        }
		dexOptions { 
            //Dexing Options:Start
            javaMaxHeapSize "2048M"
            //Dexing Options:End
            jumboMode true
			incremental true
		}
		
		renderscriptTargetApi 21
		renderscriptSupportModeEnabled true
		
		applicationId = doExtractStringFromManifest("package")
		//ABI Filters:Start
		ndk {
            abiFilters  'arm64-v8a', 'x86_64'
		}		
		//ABI Filters:End		
		//Project Default Config:End
		
		def keystorePropertiesFile = file("$projectDir/../keystore.properties")		
		if(keystorePropertiesFile.exists()){
			def keystoreProperties = new Properties()
			keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
			def keystoreFile = file(keystoreProperties['keyStoreFilePath'])
			if(keystoreFile.exists()){
				signingConfigs {
						release {
							keyAlias keystoreProperties['keyAlias']
							keyPassword keystoreProperties['keyPassword']
							storeFile keystoreFile
							storePassword keystoreProperties['keyStorePassword']
						}
				}
				buildTypes {
					release {
						signingConfig signingConfigs.release
						}
				}
				
		}
		}		
    }
	String apkPaths
	applicationVariants.all { variant ->
	variant.outputs.each { output ->
		
		println variant.buildType.name+"="+output.outputFile
		apkPaths=apkPaths+"\n"+variant.buildType.name+"="+output.outputFile
		
	}
	new File("outputAPKVariants.properties").text=apkPaths
    }
	
	 lintOptions{
        disable 'MissingTranslation'
		checkReleaseBuilds false
    }

	aaptOptions{
		cruncherEnabled = true
		
	}
    //Android build options:End
}
allprojects {
    repositories {
		//Gradle Build Depencency Repositories
        maven {
            url "https://maven.google.com"
        }
        jcenter()
        flatDir { 
			dirs 'libs'
        }		
		def hasCordovaLibs = file('CordovaAssetsLib/libs').exists()
		if (hasCordovaLibs) {
			flatDir { 
				dirs 'CordovaAssetsLib/libs'
			}	
		}	
    }
}

task deleteOldGSON(type: Delete) {
    delete fileTree('libs/gson-2.2.4.jar')
}

preBuild.dependsOn deleteOldGSON

android {
  defaultConfig.applicationId = 'com.kone.TMB'
} 
